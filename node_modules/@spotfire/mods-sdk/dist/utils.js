import { existsSync } from "fs";
import { readFile, writeFile } from "fs/promises";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
export var ModType;
(function (ModType) {
    ModType["Visualization"] = "Visualization";
    ModType["Action"] = "Action";
})(ModType || (ModType = {}));
export const parameterTypes = [
    "Boolean",
    "Currency",
    "DataTable",
    "Date",
    "DateTime",
    "Integer",
    "LongInteger",
    "Real",
    "SingleReal",
    "String",
    "Time",
    "TimeSpan",
    "Page",
    "Visualization",
];
export function isParameterType(str) {
    if (!str) {
        return false;
    }
    return parameterTypes.includes(str);
}
export function parseSpotfireType(str) {
    const _str = str.toLowerCase();
    for (const paramType of parameterTypes) {
        if (paramType.toLowerCase() === _str) {
            return paramType;
        }
    }
    return null;
}
export function debounce(f, waitMs) {
    let timeout = null;
    function debouncedF() {
        if (timeout) {
            clearTimeout(timeout);
        }
        timeout = setTimeout(() => {
            f(...arguments);
        }, waitMs);
    }
    return debouncedF;
}
export function capitalize(str) {
    if (str.length === 0) {
        return str;
    }
    else {
        return str[0].toUpperCase() + str.slice(1);
    }
}
export function capitalizeBeforeSeparators(str) {
    const sep = /([^A-z0-9])([a-z])/g;
    return str.replace(sep, (c) => c.toUpperCase());
}
export function toAlphaNum(str) {
    const notAlphaNum = /[^A-z0-9]/g;
    return str.replace(notAlphaNum, "");
}
export function toTypeName(str) {
    return capitalize(toAlphaNumWithSeparators(str));
}
export function toAlphaNumWithSeparators(str) {
    return toAlphaNum(capitalizeBeforeSeparators(str));
}
export async function formatIfPossible(filePath, content, quiet) {
    let formattedContent = content;
    try {
        const prettier = await import("prettier");
        const config = await prettier.default.resolveConfig(filePath, {
            editorconfig: true,
        });
        // In Prettier ^3.0.0 'format' returns a promise.
        formattedContent = await prettier.default.format(content, {
            filepath: filePath,
            ...config,
        });
    }
    catch (e) {
        if (!quiet) {
            console.log(`Cannot find NPM package 'prettier'. '${filePath}' file will be output without formatting. ${e}`);
        }
    }
    return formattedContent;
}
export async function readManifest(manifestPath) {
    const manifestJson = await readFile(manifestPath, { encoding: "utf8" });
    return JSON.parse(manifestJson);
}
export async function writeManifest(manifestPath, manifest, quiet = false) {
    const jsonOutput = await formatIfPossible(manifestPath, JSON.stringify(manifest), quiet);
    await writeFile(manifestPath, jsonOutput, {
        encoding: "utf-8",
    });
}
export function mkStdout({ quiet }) {
    return (msg) => {
        if (!quiet) {
            console.info(msg);
        }
    };
}
export async function getDirname() {
    return dirname(fileURLToPath(import.meta.url));
}
export async function getVersion() {
    const dirname = await getDirname();
    const packageJsonPath = join(dirname, "..", "package.json");
    if (!existsSync(packageJsonPath)) {
        console.error(`Could not find package.json at ${packageJsonPath}`);
        return "1.0.0";
    }
    const packageJson = await readFile(packageJsonPath, "utf-8");
    return JSON.parse(packageJson)["version"];
}
